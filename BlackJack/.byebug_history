continue
user.cards.size
continue
user.cards.size
continue
sum
cards.each {|card| sum += CARDS_POINTS_MAP.fetch(card[0], ace_value)}
cards.each do |card|
sum = 0
cards = ["Т<>", "2^", "5+"]
continue
user_points > dealer_points 
dealer_points > user_points && dealer_points <= 21
user_points > dealer_points && user_points <= 21
user_points
dealer_points
win
continue
user_points
deler_points
dealer_points
user_points
user
dealer
win
continue
user_points > deler_points
deler_points > user_points
(user_points > deler_points) && user_points <= 21
(deler_points > user_points) && deler_points <= 21
user_points == deler_points
win
user_points
deler_points
dealer_points
win
continue
    end
      "Ничья, у обоих по #{user_points} очков"
    else user_points == deler_points
      "Выйграл User, у него #{user_points} очков"
    elsif (user_points > deler_points) && user_points <= 21
      "Выйграл Dealer, у него #{deler_points} очков"
win = if (deler_points > user_points) && deler_points <= 21
user_points == deler_points
(user_points > deler_points) && user_points <= 21
(deler_points > user_points) && deler_points <= 21
user_points = user.total_points(user.cards)
deler_points = dealer.total_points(dealer.cards)
user.total_points(user.cards)
dealer.total_points(dealer.cards)
user.cards
dealer.cards
continue
sum
cards
self
continue
self
continue
sum
self
continue
sum
self
continue
self
continue
sum
self
continue
sum
self
cards
continue
cards[2][0]
cards[2]
CARDS_POINTS_MAP.fetch(cards[2][0], ace_value)
CARDS_POINTS_MAP.fetch(cards[1][0], ace_value)
cards
CARDS_POINTS_MAP.fetch(cards[0][0], ace_value)
CARDS_POINTS_MAP.fetch(cards[0], ace_value)
cards[3]
cards[2]
cards[1]
cards.second
cards.last
cards.first
cards.second
cards.second[0]
cards.first[1]
cards.first[0]
cards.first
cards
sum
self
continue
sum
self
continue
sum
self.points
self
continue
sum
self
sum
CARDS_POINTS_MAP.fetch(cards.last[0], ace_value)
CARDS_POINTS_MAP.fetch(cards.first.last[0], ace_value)
CARDS_POINTS_MAP.fetch(cards.first[0], ace_value)
sum
self
continue
  }
    "8" => 8, "9" => 9, "10" => 10, "К" => 10, "Д" => 10, "В" => 10
    "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7,
CARDS_POINTS_MAP = {
CalculateCards::CARDS_POINTS_MAP[dealer.cards.first[0]]
user.cards
dealer.cards
deale.cards
user.total_points(user.cards)
dealer.total_points(dealer.cards)
print_result_game
continue
user.total_points(user.cards)
user.cards
continue
user.cards
user.total_points(user.cards)
continue
user.total_points(user.cards)
user.cards
continue
game_status
open_cards
game_status
continue
game_status
open_cards
open_card
game_status
continue
open_cards == 'return'
open_cards
continue
open_cards
continue
return
@open_cards_flag
open_cards_flag
return
break
continue
break
open_cards_flag
continue
open_cards_flag
continue
open_cards_flag
open_cards_flag = true
open_cards_flag
continue
cards
dealer.cards
dealer
continue
self.current_step
continue
self.current_step
continue
self.current_step
current_step
continue
self.current_step = current_step == 'user' ? 'dealer' : 'user'
current_step
self.current_step
        self.current_step = current_step == 'user' ? 'dealer' : 'user'
self.current_step
self
current_step
continue
current_step
eval(ACTIONS[1])
current_step
deler_cards_points
continue
dealer.points
dealer
deler_cards_points
continue
ace_value
cards
points
continue
points
continue
points
continue
ace_value
points
continue
ace_value
points
continue
ace_value
cards
continue
points
continue
points
ace_value
cards
points
continue
cards
points
continue
ace_value
@points = 24
ace_value
points = 24
ace_value
points
cards
@points
continue
calculate
@points
cards
sum
cards
sum
continue
sum
continue
CARDS_POINTS_MAP[cards.last[0]]
cards.last[0]
cards.last
cards.first
cards.second
cards.second[0]
CARDS_POINTS_MAP[cards.second[0]]
CARDS_POINTS_MAP[cards.first[0]]
CARDS_POINTS_MAP[card.first[0]]
sum
cards
continue
cards.first[0]
cards.first.first
cards.first
self
cards
continue
self.current_step
current_step
